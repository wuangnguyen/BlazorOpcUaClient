@page "/"
@using System;
@using System.Threading.Tasks;
@using Microsoft.Extensions.Configuration;
@using OPC_UA_Client.Services;
@using Opc.Ua;
@using Opc.Ua.Client;
@using Opc.Ua.Configuration;
@inject IConfiguration Configuration
@inject OpcUaPollingService PollingService
@inject OpcUaSubscriptionService SubscriptionService
@inject ILoggerFactory LoggerFactory
@implements IAsyncDisposable
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<div class="container">
    <div class="row mb-4">
        <div class="col-md-6">
            <h2>Polling data:</h2>
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Tag1</h5>
                    <div class="display-4 text-center fw-bold">@pollingTag1Data</div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <h2>Subscription Data:</h2>
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Tag1</h5>
                    <div class="display-4 text-center fw-bold">@subscriptionTag1Data</div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Tag3</h5>
                    <div class="display-4 text-center fw-bold">@pollingTag3Data</div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Tag3</h5>
                    <div class="display-4 text-center fw-bold">@subscriptionTag3Data</div>
                </div>
            </div>
        </div>
    </div>
   
    <div class="row mt-4">
        <div class="col-md-12">
            <h2>On demand data:</h2>
            <button class="btn btn-primary" @onclick="ReadOnDemand">Click me to read value from Tag3</button>
            <div class="mt-3">
                <div class="display-4 text-center fw-bold">@onDemandData</div>
            </div>
        </div>
    </div>
</div>

@code {
    private string? pollingTag1Data = "...";
    private string? pollingTag3Data = "...";
    private string? subscriptionTag1Data = "...";
    private string? subscriptionTag3Data = "...";
    private string? onDemandData = "";

    protected async override Task OnInitializedAsync()
    {
        // Setup Polling
        PollingService.OnDataChanged += HandleReceivedPollingData;

        NodeId[] nodeIds = new[] { new NodeId("Channel1.Device1.Tag1", 2), new NodeId("Channel1.Device2.Tag3", 2) };

        await PollingService.StartPollingAsync(nodeIds, 1000);

        // Setup Subscription
        SubscriptionService.OnSubscriptionDataChanged += HandleSubscriptionDataChanged;

        var monitoredItems = new[]
        {
            new MonitoredItem
            {
                DisplayName = "Channel1.Device1.Tag1",
                StartNodeId = new NodeId("Channel1.Device1.Tag1", 2)
            },
            new MonitoredItem
            {
                DisplayName = "Channel1.Device2.Tag3",
                StartNodeId = new NodeId("Channel1.Device2.Tag3", 2)
            }
        };

        await SubscriptionService.AddMonitoredItemAsync(monitoredItems);
    }

    private void HandleReceivedPollingData(NodeId nodeId, DataValue value)
    {
        Console.WriteLine($"Data from Polling: {nodeId.Identifier.ToString()} - {value.Value?.ToString()}");
        
        switch (nodeId.Identifier.ToString())
        {
            case "Channel1.Device1.Tag1":
                pollingTag1Data = value.Value?.ToString();
                break;
            case "Channel1.Device2.Tag3":
                pollingTag3Data = value.Value?.ToString();
                break;
        }
        
        InvokeAsync(StateHasChanged);
    }

    private void HandleSubscriptionDataChanged(string displayName, DataValue dataValue)
    {
        Console.WriteLine($"Data from {displayName}: {dataValue.Value?.ToString()}");
        
        switch (displayName)
        {
            case "Channel1.Device1.Tag1":
                subscriptionTag1Data = dataValue.Value?.ToString();
                break;
            case "Channel1.Device2.Tag3":
                subscriptionTag3Data = dataValue.Value?.ToString();
                break;
        }

        InvokeAsync(StateHasChanged);
    }

    private async Task ReadOnDemand()
    {
        var nodeId = new NodeId("Channel1.Device2.Tag3", 2);
        var session = await PollingService.GetSessionAsync();
        var readValue = await session.ReadValueAsync(nodeId);

        if (readValue != null && StatusCode.IsGood(readValue.StatusCode))
        {
            onDemandData = readValue.Value?.ToString();
        }
        else
        {
            onDemandData = "Error reading value";
        }

        await InvokeAsync(StateHasChanged);
    }

    public async ValueTask DisposeAsync()
    {
        PollingService.OnDataChanged -= HandleReceivedPollingData;
        await PollingService.DisposeAsync();

        SubscriptionService.OnSubscriptionDataChanged -= HandleSubscriptionDataChanged;
        await SubscriptionService.DisposeAsync();
    }
}
